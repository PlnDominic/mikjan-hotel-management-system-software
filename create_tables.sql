-- Create access_requests table
CREATE TABLE IF NOT EXISTS access_requests (
    id BIGSERIAL PRIMARY KEY,
    full_name TEXT NOT NULL,
    email TEXT NOT NULL,
    position TEXT NOT NULL,
    department TEXT NOT NULL,
    reason TEXT,
    contact_number TEXT,
    request_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    status TEXT DEFAULT 'pending',
    processed_by UUID REFERENCES auth.users(id),
    processed_at TIMESTAMP WITH TIME ZONE
);

-- Create permissions table
CREATE TABLE IF NOT EXISTS permissions (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

-- Create user_profiles table
CREATE TABLE IF NOT EXISTS user_profiles (
    user_id UUID PRIMARY KEY REFERENCES auth.users(id),
    full_name TEXT,
    position TEXT,
    department TEXT,
    contact_number TEXT,
    role TEXT DEFAULT 'staff',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create user_permissions junction table
CREATE TABLE IF NOT EXISTS user_permissions (
    id BIGSERIAL PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    permission_id INTEGER REFERENCES permissions(id) ON DELETE CASCADE,
    UNIQUE(user_id, permission_id)
);

-- Insert default permissions
INSERT INTO permissions (name, description) VALUES
    ('manage_reservations', 'Create, update, and delete reservations'),
    ('manage_rooms', 'Manage room status and details'),
    ('manage_guests', 'Access and modify guest information'),
    ('manage_billing', 'Process payments and manage billing'),
    ('view_reports', 'Access reporting and analytics'),
    ('manage_staff', 'Manage staff accounts and permissions'),
    ('system_settings', 'Configure system settings')
ON CONFLICT (name) DO NOTHING;

-- Enable Row Level Security on all tables
ALTER TABLE access_requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_permissions ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for access_requests
CREATE POLICY "Anyone can insert access requests" 
ON access_requests 
FOR INSERT 
WITH CHECK (true);

CREATE POLICY "Admins can view access requests" 
ON access_requests 
FOR SELECT 
USING (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

CREATE POLICY "Admins can update access requests" 
ON access_requests 
FOR UPDATE 
USING (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

-- Create RLS policies for permissions
CREATE POLICY "Anyone can view permissions" 
ON permissions 
FOR SELECT 
USING (true);

-- Create RLS policies for user_profiles
CREATE POLICY "Users can view their own profiles" 
ON user_profiles 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all profiles" 
ON user_profiles 
FOR SELECT 
USING (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

CREATE POLICY "Admins can insert profiles" 
ON user_profiles 
FOR INSERT 
WITH CHECK (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
) OR auth.uid() = user_id);

CREATE POLICY "Users can update their own profiles" 
ON user_profiles 
FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Admins can update any profile" 
ON user_profiles 
FOR UPDATE 
USING (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

-- Create RLS policies for user_permissions
CREATE POLICY "Users can view their own permissions" 
ON user_permissions 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all permissions" 
ON user_permissions 
FOR SELECT 
USING (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

CREATE POLICY "Admins can insert permissions" 
ON user_permissions 
FOR INSERT 
WITH CHECK (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

CREATE POLICY "Admins can update permissions" 
ON user_permissions 
FOR UPDATE 
USING (auth.uid() IN (
  SELECT user_id FROM user_profiles WHERE role IN ('admin', 'administrator')
));

-- Create invoices table
CREATE TABLE IF NOT EXISTS public.invoices (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  guest_name TEXT NOT NULL,
  room_number TEXT NOT NULL,
  check_in_date TEXT NOT NULL,
  check_out_date TEXT NOT NULL,
  room_type TEXT NOT NULL DEFAULT 'Standard',
  nights INTEGER NOT NULL DEFAULT 1,
  room_rate DECIMAL(10, 2) NOT NULL DEFAULT 0,
  room_total DECIMAL(10, 2) NOT NULL DEFAULT 0,
  service_total DECIMAL(10, 2) NOT NULL DEFAULT 0,
  amount DECIMAL(10, 2) NOT NULL DEFAULT 0,
  status TEXT NOT NULL DEFAULT 'Pending',
  has_service_items BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create invoice items table
CREATE TABLE IF NOT EXISTS public.invoice_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  invoice_id BIGINT NOT NULL REFERENCES public.invoices(id) ON DELETE CASCADE,
  service_id BIGINT,
  item_name TEXT NOT NULL,
  item_price DECIMAL(10, 2) NOT NULL DEFAULT 0,
  item_date TEXT,
  item_type TEXT DEFAULT 'service',
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add RLS policies for invoices
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Invoices are viewable by authenticated users"
  ON public.invoices
  FOR SELECT
  USING (auth.role() = 'authenticated');

CREATE POLICY "Invoices are insertable by authenticated users"
  ON public.invoices
  FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Invoices are updatable by authenticated users"
  ON public.invoices
  FOR UPDATE
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Invoices are deletable by authenticated users"
  ON public.invoices
  FOR DELETE
  USING (auth.role() = 'authenticated');

-- Add RLS policies for invoice_items
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Invoice items are viewable by authenticated users"
  ON public.invoice_items
  FOR SELECT
  USING (auth.role() = 'authenticated');

CREATE POLICY "Invoice items are insertable by authenticated users"
  ON public.invoice_items
  FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Invoice items are updatable by authenticated users"
  ON public.invoice_items
  FOR UPDATE
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Invoice items are deletable by authenticated users"
  ON public.invoice_items
  FOR DELETE
  USING (auth.role() = 'authenticated');

-- Setup triggers to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_invoices_timestamp
BEFORE UPDATE ON public.invoices
FOR EACH ROW
EXECUTE FUNCTION update_modified_column(); 